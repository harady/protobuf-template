// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/nested.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Centurion.Models.Data {

  /// <summary>Holder for reflection information generated from data/nested.proto</summary>
  public static partial class NestedReflection {

    #region Descriptor
    /// <summary>File descriptor for data/nested.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NestedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFkYXRhL25lc3RlZC5wcm90bxIEZGF0YSKuAQoKQ29mZmVlRGF0YRIKCgJp",
            "ZBgBIAEoBBIwCgtjb2ZmZWVfdHlwZRgCIAEoDjIbLmRhdGEuQ29mZmVlRGF0",
            "YS5Db2ZmZWVUeXBlEiMKCnN1Z2FyX3R5cGUYAyABKA4yDy5kYXRhLlN1Z2Fy",
            "VHlwZSI9CgpDb2ZmZWVUeXBlEhUKEUNPRkZFRV9UWVBFX0xBVFRFEAASGAoU",
            "Q09GRkVFX1RZUEVfRVNQUkVTU08QASJrCgdOZXN0ZWRBGmAKB05lc3RlZEIa",
            "VQoHTmVzdGVkQxIKCgJpZBgBIAEoBCI+CgtOZXN0ZWRFbnVtRBIWChJORVNU",
            "RURfRU5VTV9EX05PTkUQABIXChNORVNURURfRU5VTV9EX0VYSVNUEAEqVAoJ",
            "U3VnYXJUeXBlEhQKEFNVR0FSX1RZUEVfV0hJVEUQABIUChBTVUdBUl9UWVBF",
            "X0JST1dOEAESGwoXU1VHQVJfVFlQRV9aRVJPX0NBTE9SSUUQAkIYqgIVQ2Vu",
            "dHVyaW9uLk1vZGVscy5EYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Centurion.Models.Data.SugarType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Centurion.Models.Data.CoffeeData), global::Centurion.Models.Data.CoffeeData.Parser, new[]{ "Id", "CoffeeType", "SugarType" }, null, new[]{ typeof(global::Centurion.Models.Data.CoffeeData.Types.CoffeeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Centurion.Models.Data.NestedA), global::Centurion.Models.Data.NestedA.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Centurion.Models.Data.NestedA.Types.NestedB), global::Centurion.Models.Data.NestedA.Types.NestedB.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Centurion.Models.Data.NestedA.Types.NestedB.Types.NestedC), global::Centurion.Models.Data.NestedA.Types.NestedB.Types.NestedC.Parser, new[]{ "Id" }, null, new[]{ typeof(global::Centurion.Models.Data.NestedA.Types.NestedB.Types.NestedC.Types.NestedEnumD) }, null)})})
          }));
    }
    #endregion

  }
  #region Enums
  public enum SugarType {
    [pbr::OriginalName("SUGAR_TYPE_WHITE")] White = 0,
    [pbr::OriginalName("SUGAR_TYPE_BROWN")] Brown = 1,
    [pbr::OriginalName("SUGAR_TYPE_ZERO_CALORIE")] ZeroCalorie = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CoffeeData : pb::IMessage<CoffeeData> {
    private static readonly pb::MessageParser<CoffeeData> _parser = new pb::MessageParser<CoffeeData>(() => new CoffeeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoffeeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centurion.Models.Data.NestedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoffeeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoffeeData(CoffeeData other) : this() {
      id_ = other.id_;
      coffeeType_ = other.coffeeType_;
      sugarType_ = other.sugarType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoffeeData Clone() {
      return new CoffeeData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "coffee_type" field.</summary>
    public const int CoffeeTypeFieldNumber = 2;
    private global::Centurion.Models.Data.CoffeeData.Types.CoffeeType coffeeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centurion.Models.Data.CoffeeData.Types.CoffeeType CoffeeType {
      get { return coffeeType_; }
      set {
        coffeeType_ = value;
      }
    }

    /// <summary>Field number for the "sugar_type" field.</summary>
    public const int SugarTypeFieldNumber = 3;
    private global::Centurion.Models.Data.SugarType sugarType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Centurion.Models.Data.SugarType SugarType {
      get { return sugarType_; }
      set {
        sugarType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoffeeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoffeeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CoffeeType != other.CoffeeType) return false;
      if (SugarType != other.SugarType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (CoffeeType != 0) hash ^= CoffeeType.GetHashCode();
      if (SugarType != 0) hash ^= SugarType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (CoffeeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CoffeeType);
      }
      if (SugarType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SugarType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (CoffeeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CoffeeType);
      }
      if (SugarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SugarType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoffeeData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.CoffeeType != 0) {
        CoffeeType = other.CoffeeType;
      }
      if (other.SugarType != 0) {
        SugarType = other.SugarType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            coffeeType_ = (global::Centurion.Models.Data.CoffeeData.Types.CoffeeType) input.ReadEnum();
            break;
          }
          case 24: {
            sugarType_ = (global::Centurion.Models.Data.SugarType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CoffeeData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CoffeeType {
        [pbr::OriginalName("COFFEE_TYPE_LATTE")] Latte = 0,
        [pbr::OriginalName("COFFEE_TYPE_ESPRESSO")] Espresso = 1,
      }

    }
    #endregion

  }

  public sealed partial class NestedA : pb::IMessage<NestedA> {
    private static readonly pb::MessageParser<NestedA> _parser = new pb::MessageParser<NestedA>(() => new NestedA());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Centurion.Models.Data.NestedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedA(NestedA other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedA Clone() {
      return new NestedA(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedA other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NestedA message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NestedB : pb::IMessage<NestedB> {
        private static readonly pb::MessageParser<NestedB> _parser = new pb::MessageParser<NestedB>(() => new NestedB());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedB> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Centurion.Models.Data.NestedA.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedB() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedB(NestedB other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedB Clone() {
          return new NestedB(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedB);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedB other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedB other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the NestedB message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class NestedC : pb::IMessage<NestedC> {
            private static readonly pb::MessageParser<NestedC> _parser = new pb::MessageParser<NestedC>(() => new NestedC());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NestedC> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Centurion.Models.Data.NestedA.Types.NestedB.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NestedC() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NestedC(NestedC other) : this() {
              id_ = other.id_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public NestedC Clone() {
              return new NestedC(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private ulong id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as NestedC);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(NestedC other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id != 0UL) hash ^= Id.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Id);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(NestedC other) {
              if (other == null) {
                return;
              }
              if (other.Id != 0UL) {
                Id = other.Id;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the NestedC message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum NestedEnumD {
                [pbr::OriginalName("NESTED_ENUM_D_NONE")] None = 0,
                [pbr::OriginalName("NESTED_ENUM_D_EXIST")] Exist = 1,
              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
