// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/player.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Test.CsharpNamespace {

  /// <summary>Holder for reflection information generated from data/player.proto</summary>
  public static partial class PlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for data/player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFkYXRhL3BsYXllci5wcm90bxIEZGF0YRoWZGF0YS9wbGF5ZXJfZGVjay5w",
            "cm90byJQChFQbGF5ZXJNaW5pbWFsRGF0YRIKCgJpZBgBIAEoBBIMCgRuYW1l",
            "GAogASgJEgwKBHJhbmsYFCABKA0SEwoLcGxheWVyX2NvZGUYHiABKAkiwQMK",
            "EFBsYXllck5vcm1hbERhdGESJQoEYmFzZRgKIAEoCzIXLmRhdGEuUGxheWVy",
            "TWluaW1hbERhdGESCwoDZXhwGBQgASgNEg8KB3N0YW1pbmEYHiABKA0SEwoL",
            "bWF4X3N0YW1pbmEYKCABKA0SGgoSc3RhbWluYV91cGRhdGVkX2F0GDIgASgD",
            "Eg0KBW1vbmV5GDwgASgNEhYKDmZyaWVuZF9wb2l1bnR0GEYgASgNEg8KB0Ny",
            "eXN0YWwYUCABKA0SEwoLRnJlZUNyeXN0YWwYWiABKA0SEwoLUGFpZENyeXN0",
            "YWwYZCABKA0SFAoMbWF4X2NhcGFjaXR5GG4gASgNEhcKD2N1cnJlbnRfZGVj",
            "a19pZBh4IAEoBBIhChhjdXJyZW50X2NvbGlzZXVtX2RlY2tfaWQYggEgASgE",
            "EiYKHWN1cnJlbnRfc29sb19jb2xpc2V1bV9kZWNrX2lkGIwBIAEoBBIZChBw",
            "cmV2X3JhbmtfdXBfZXhwGJYBIAEoDRIVCgxuZXh0X3JhbmtfcHQYoAEgASgN",
            "EikKBWRlY2tzGKoBIAEoCzIZLmRhdGEuUGxheWVyTXVsdGlEZWNrRGF0YUIX",
            "qgIUVGVzdC5Dc2hhcnBOYW1lc3BhY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Data.PlayerDeckReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Test.CsharpNamespace.PlayerMinimalData), global::Test.CsharpNamespace.PlayerMinimalData.Parser, new[]{ "Id", "Name", "Rank", "PlayerCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Test.CsharpNamespace.PlayerNormalData), global::Test.CsharpNamespace.PlayerNormalData.Parser, new[]{ "Base", "Exp", "Stamina", "MaxStamina", "StaminaUpdatedAt", "Money", "FriendPoiuntt", "Crystal", "FreeCrystal", "PaidCrystal", "MaxCapacity", "CurrentDeckId", "CurrentColiseumDeckId", "CurrentSoloColiseumDeckId", "PrevRankUpExp", "NextRankPt", "Decks" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerMinimalData : pb::IMessage<PlayerMinimalData> {
    private static readonly pb::MessageParser<PlayerMinimalData> _parser = new pb::MessageParser<PlayerMinimalData>(() => new PlayerMinimalData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMinimalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.CsharpNamespace.PlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMinimalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMinimalData(PlayerMinimalData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      rank_ = other.rank_;
      playerCode_ = other.playerCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMinimalData Clone() {
      return new PlayerMinimalData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 20;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "player_code" field.</summary>
    public const int PlayerCodeFieldNumber = 30;
    private string playerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerCode {
      get { return playerCode_; }
      set {
        playerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMinimalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMinimalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Rank != other.Rank) return false;
      if (PlayerCode != other.PlayerCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PlayerCode.Length != 0) hash ^= PlayerCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (Rank != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Rank);
      }
      if (PlayerCode.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PlayerCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (PlayerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayerCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMinimalData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PlayerCode.Length != 0) {
        PlayerCode = other.PlayerCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 160: {
            Rank = input.ReadUInt32();
            break;
          }
          case 242: {
            PlayerCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerNormalData : pb::IMessage<PlayerNormalData> {
    private static readonly pb::MessageParser<PlayerNormalData> _parser = new pb::MessageParser<PlayerNormalData>(() => new PlayerNormalData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerNormalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.CsharpNamespace.PlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNormalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNormalData(PlayerNormalData other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      exp_ = other.exp_;
      stamina_ = other.stamina_;
      maxStamina_ = other.maxStamina_;
      staminaUpdatedAt_ = other.staminaUpdatedAt_;
      money_ = other.money_;
      friendPoiuntt_ = other.friendPoiuntt_;
      crystal_ = other.crystal_;
      freeCrystal_ = other.freeCrystal_;
      paidCrystal_ = other.paidCrystal_;
      maxCapacity_ = other.maxCapacity_;
      currentDeckId_ = other.currentDeckId_;
      currentColiseumDeckId_ = other.currentColiseumDeckId_;
      currentSoloColiseumDeckId_ = other.currentSoloColiseumDeckId_;
      prevRankUpExp_ = other.prevRankUpExp_;
      nextRankPt_ = other.nextRankPt_;
      Decks = other.decks_ != null ? other.Decks.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerNormalData Clone() {
      return new PlayerNormalData(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 10;
    private global::Test.CsharpNamespace.PlayerMinimalData base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Test.CsharpNamespace.PlayerMinimalData Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 20;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 30;
    private uint stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "max_stamina" field.</summary>
    public const int MaxStaminaFieldNumber = 40;
    private uint maxStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxStamina {
      get { return maxStamina_; }
      set {
        maxStamina_ = value;
      }
    }

    /// <summary>Field number for the "stamina_updated_at" field.</summary>
    public const int StaminaUpdatedAtFieldNumber = 50;
    private long staminaUpdatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StaminaUpdatedAt {
      get { return staminaUpdatedAt_; }
      set {
        staminaUpdatedAt_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 60;
    private uint money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "friend_poiuntt" field.</summary>
    public const int FriendPoiunttFieldNumber = 70;
    private uint friendPoiuntt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPoiuntt {
      get { return friendPoiuntt_; }
      set {
        friendPoiuntt_ = value;
      }
    }

    /// <summary>Field number for the "Crystal" field.</summary>
    public const int CrystalFieldNumber = 80;
    private uint crystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Crystal {
      get { return crystal_; }
      set {
        crystal_ = value;
      }
    }

    /// <summary>Field number for the "FreeCrystal" field.</summary>
    public const int FreeCrystalFieldNumber = 90;
    private uint freeCrystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeCrystal {
      get { return freeCrystal_; }
      set {
        freeCrystal_ = value;
      }
    }

    /// <summary>Field number for the "PaidCrystal" field.</summary>
    public const int PaidCrystalFieldNumber = 100;
    private uint paidCrystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PaidCrystal {
      get { return paidCrystal_; }
      set {
        paidCrystal_ = value;
      }
    }

    /// <summary>Field number for the "max_capacity" field.</summary>
    public const int MaxCapacityFieldNumber = 110;
    private uint maxCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCapacity {
      get { return maxCapacity_; }
      set {
        maxCapacity_ = value;
      }
    }

    /// <summary>Field number for the "current_deck_id" field.</summary>
    public const int CurrentDeckIdFieldNumber = 120;
    private ulong currentDeckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentDeckId {
      get { return currentDeckId_; }
      set {
        currentDeckId_ = value;
      }
    }

    /// <summary>Field number for the "current_coliseum_deck_id" field.</summary>
    public const int CurrentColiseumDeckIdFieldNumber = 130;
    private ulong currentColiseumDeckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentColiseumDeckId {
      get { return currentColiseumDeckId_; }
      set {
        currentColiseumDeckId_ = value;
      }
    }

    /// <summary>Field number for the "current_solo_coliseum_deck_id" field.</summary>
    public const int CurrentSoloColiseumDeckIdFieldNumber = 140;
    private ulong currentSoloColiseumDeckId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentSoloColiseumDeckId {
      get { return currentSoloColiseumDeckId_; }
      set {
        currentSoloColiseumDeckId_ = value;
      }
    }

    /// <summary>Field number for the "prev_rank_up_exp" field.</summary>
    public const int PrevRankUpExpFieldNumber = 150;
    private uint prevRankUpExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrevRankUpExp {
      get { return prevRankUpExp_; }
      set {
        prevRankUpExp_ = value;
      }
    }

    /// <summary>Field number for the "next_rank_pt" field.</summary>
    public const int NextRankPtFieldNumber = 160;
    private uint nextRankPt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextRankPt {
      get { return nextRankPt_; }
      set {
        nextRankPt_ = value;
      }
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 170;
    private global::Data.PlayerMultiDeckData decks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Data.PlayerMultiDeckData Decks {
      get { return decks_; }
      set {
        decks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerNormalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerNormalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (Exp != other.Exp) return false;
      if (Stamina != other.Stamina) return false;
      if (MaxStamina != other.MaxStamina) return false;
      if (StaminaUpdatedAt != other.StaminaUpdatedAt) return false;
      if (Money != other.Money) return false;
      if (FriendPoiuntt != other.FriendPoiuntt) return false;
      if (Crystal != other.Crystal) return false;
      if (FreeCrystal != other.FreeCrystal) return false;
      if (PaidCrystal != other.PaidCrystal) return false;
      if (MaxCapacity != other.MaxCapacity) return false;
      if (CurrentDeckId != other.CurrentDeckId) return false;
      if (CurrentColiseumDeckId != other.CurrentColiseumDeckId) return false;
      if (CurrentSoloColiseumDeckId != other.CurrentSoloColiseumDeckId) return false;
      if (PrevRankUpExp != other.PrevRankUpExp) return false;
      if (NextRankPt != other.NextRankPt) return false;
      if (!object.Equals(Decks, other.Decks)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (MaxStamina != 0) hash ^= MaxStamina.GetHashCode();
      if (StaminaUpdatedAt != 0L) hash ^= StaminaUpdatedAt.GetHashCode();
      if (Money != 0) hash ^= Money.GetHashCode();
      if (FriendPoiuntt != 0) hash ^= FriendPoiuntt.GetHashCode();
      if (Crystal != 0) hash ^= Crystal.GetHashCode();
      if (FreeCrystal != 0) hash ^= FreeCrystal.GetHashCode();
      if (PaidCrystal != 0) hash ^= PaidCrystal.GetHashCode();
      if (MaxCapacity != 0) hash ^= MaxCapacity.GetHashCode();
      if (CurrentDeckId != 0UL) hash ^= CurrentDeckId.GetHashCode();
      if (CurrentColiseumDeckId != 0UL) hash ^= CurrentColiseumDeckId.GetHashCode();
      if (CurrentSoloColiseumDeckId != 0UL) hash ^= CurrentSoloColiseumDeckId.GetHashCode();
      if (PrevRankUpExp != 0) hash ^= PrevRankUpExp.GetHashCode();
      if (NextRankPt != 0) hash ^= NextRankPt.GetHashCode();
      if (decks_ != null) hash ^= Decks.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Base);
      }
      if (Exp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Exp);
      }
      if (Stamina != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Stamina);
      }
      if (MaxStamina != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(MaxStamina);
      }
      if (StaminaUpdatedAt != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(StaminaUpdatedAt);
      }
      if (Money != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(Money);
      }
      if (FriendPoiuntt != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(FriendPoiuntt);
      }
      if (Crystal != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(Crystal);
      }
      if (FreeCrystal != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(FreeCrystal);
      }
      if (PaidCrystal != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(PaidCrystal);
      }
      if (MaxCapacity != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(MaxCapacity);
      }
      if (CurrentDeckId != 0UL) {
        output.WriteRawTag(192, 7);
        output.WriteUInt64(CurrentDeckId);
      }
      if (CurrentColiseumDeckId != 0UL) {
        output.WriteRawTag(144, 8);
        output.WriteUInt64(CurrentColiseumDeckId);
      }
      if (CurrentSoloColiseumDeckId != 0UL) {
        output.WriteRawTag(224, 8);
        output.WriteUInt64(CurrentSoloColiseumDeckId);
      }
      if (PrevRankUpExp != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(PrevRankUpExp);
      }
      if (NextRankPt != 0) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(NextRankPt);
      }
      if (decks_ != null) {
        output.WriteRawTag(210, 10);
        output.WriteMessage(Decks);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (Exp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Stamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Stamina);
      }
      if (MaxStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxStamina);
      }
      if (StaminaUpdatedAt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StaminaUpdatedAt);
      }
      if (Money != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (FriendPoiuntt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FriendPoiuntt);
      }
      if (Crystal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Crystal);
      }
      if (FreeCrystal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FreeCrystal);
      }
      if (PaidCrystal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PaidCrystal);
      }
      if (MaxCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxCapacity);
      }
      if (CurrentDeckId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CurrentDeckId);
      }
      if (CurrentColiseumDeckId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CurrentColiseumDeckId);
      }
      if (CurrentSoloColiseumDeckId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CurrentSoloColiseumDeckId);
      }
      if (PrevRankUpExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrevRankUpExp);
      }
      if (NextRankPt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NextRankPt);
      }
      if (decks_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Decks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerNormalData other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Test.CsharpNamespace.PlayerMinimalData();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.MaxStamina != 0) {
        MaxStamina = other.MaxStamina;
      }
      if (other.StaminaUpdatedAt != 0L) {
        StaminaUpdatedAt = other.StaminaUpdatedAt;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
      if (other.FriendPoiuntt != 0) {
        FriendPoiuntt = other.FriendPoiuntt;
      }
      if (other.Crystal != 0) {
        Crystal = other.Crystal;
      }
      if (other.FreeCrystal != 0) {
        FreeCrystal = other.FreeCrystal;
      }
      if (other.PaidCrystal != 0) {
        PaidCrystal = other.PaidCrystal;
      }
      if (other.MaxCapacity != 0) {
        MaxCapacity = other.MaxCapacity;
      }
      if (other.CurrentDeckId != 0UL) {
        CurrentDeckId = other.CurrentDeckId;
      }
      if (other.CurrentColiseumDeckId != 0UL) {
        CurrentColiseumDeckId = other.CurrentColiseumDeckId;
      }
      if (other.CurrentSoloColiseumDeckId != 0UL) {
        CurrentSoloColiseumDeckId = other.CurrentSoloColiseumDeckId;
      }
      if (other.PrevRankUpExp != 0) {
        PrevRankUpExp = other.PrevRankUpExp;
      }
      if (other.NextRankPt != 0) {
        NextRankPt = other.NextRankPt;
      }
      if (other.decks_ != null) {
        if (decks_ == null) {
          decks_ = new global::Data.PlayerMultiDeckData();
        }
        Decks.MergeFrom(other.Decks);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            if (base_ == null) {
              base_ = new global::Test.CsharpNamespace.PlayerMinimalData();
            }
            input.ReadMessage(base_);
            break;
          }
          case 160: {
            Exp = input.ReadUInt32();
            break;
          }
          case 240: {
            Stamina = input.ReadUInt32();
            break;
          }
          case 320: {
            MaxStamina = input.ReadUInt32();
            break;
          }
          case 400: {
            StaminaUpdatedAt = input.ReadInt64();
            break;
          }
          case 480: {
            Money = input.ReadUInt32();
            break;
          }
          case 560: {
            FriendPoiuntt = input.ReadUInt32();
            break;
          }
          case 640: {
            Crystal = input.ReadUInt32();
            break;
          }
          case 720: {
            FreeCrystal = input.ReadUInt32();
            break;
          }
          case 800: {
            PaidCrystal = input.ReadUInt32();
            break;
          }
          case 880: {
            MaxCapacity = input.ReadUInt32();
            break;
          }
          case 960: {
            CurrentDeckId = input.ReadUInt64();
            break;
          }
          case 1040: {
            CurrentColiseumDeckId = input.ReadUInt64();
            break;
          }
          case 1120: {
            CurrentSoloColiseumDeckId = input.ReadUInt64();
            break;
          }
          case 1200: {
            PrevRankUpExp = input.ReadUInt32();
            break;
          }
          case 1280: {
            NextRankPt = input.ReadUInt32();
            break;
          }
          case 1362: {
            if (decks_ == null) {
              decks_ = new global::Data.PlayerMultiDeckData();
            }
            input.ReadMessage(decks_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
