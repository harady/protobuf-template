// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/player_deck.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data {

  /// <summary>Holder for reflection information generated from data/player_deck.proto</summary>
  public static partial class PlayerDeckReflection {

    #region Descriptor
    /// <summary>File descriptor for data/player_deck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerDeckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZkYXRhL3BsYXllcl9kZWNrLnByb3RvEgRkYXRhGhZkYXRhL21hc3Rlcl9k",
            "YXRhLnByb3RvIjoKE1BsYXllck11bHRpRGVja0RhdGESIwoFZGVja3MYCiAD",
            "KAsyFC5kYXRhLlBsYXllckRlY2tEYXRhIkMKDlBsYXllckRlY2tEYXRhEgoK",
            "AmlkGAogASgEEgwKBG5hbWUYFCABKAkSFwoPcGxheWVyX2hlcm9faWRzGB4g",
            "AygEIi8KDlBsYXllckhlcm9EYXRhEh0KBWhlcm9zGAogAygLMg4uZGF0YS5I",
            "ZXJvRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Data.MasterDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.PlayerMultiDeckData), global::Data.PlayerMultiDeckData.Parser, new[]{ "Decks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.PlayerDeckData), global::Data.PlayerDeckData.Parser, new[]{ "Id", "Name", "PlayerHeroIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.PlayerHeroData), global::Data.PlayerHeroData.Parser, new[]{ "Heros" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerMultiDeckData : pb::IMessage<PlayerMultiDeckData> {
    private static readonly pb::MessageParser<PlayerMultiDeckData> _parser = new pb::MessageParser<PlayerMultiDeckData>(() => new PlayerMultiDeckData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMultiDeckData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.PlayerDeckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMultiDeckData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMultiDeckData(PlayerMultiDeckData other) : this() {
      decks_ = other.decks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMultiDeckData Clone() {
      return new PlayerMultiDeckData(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Data.PlayerDeckData> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(82, global::Data.PlayerDeckData.Parser);
    private readonly pbc::RepeatedField<global::Data.PlayerDeckData> decks_ = new pbc::RepeatedField<global::Data.PlayerDeckData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.PlayerDeckData> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMultiDeckData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMultiDeckData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      decks_.WriteTo(output, _repeated_decks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMultiDeckData other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerDeckData : pb::IMessage<PlayerDeckData> {
    private static readonly pb::MessageParser<PlayerDeckData> _parser = new pb::MessageParser<PlayerDeckData>(() => new PlayerDeckData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerDeckData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.PlayerDeckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDeckData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDeckData(PlayerDeckData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      playerHeroIds_ = other.playerHeroIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDeckData Clone() {
      return new PlayerDeckData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 20;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_hero_ids" field.</summary>
    public const int PlayerHeroIdsFieldNumber = 30;
    private static readonly pb::FieldCodec<ulong> _repeated_playerHeroIds_codec
        = pb::FieldCodec.ForUInt64(242);
    private readonly pbc::RepeatedField<ulong> playerHeroIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PlayerHeroIds {
      get { return playerHeroIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerDeckData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerDeckData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!playerHeroIds_.Equals(other.playerHeroIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= playerHeroIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Name);
      }
      playerHeroIds_.WriteTo(output, _repeated_playerHeroIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += playerHeroIds_.CalculateSize(_repeated_playerHeroIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerDeckData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      playerHeroIds_.Add(other.playerHeroIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            Id = input.ReadUInt64();
            break;
          }
          case 162: {
            Name = input.ReadString();
            break;
          }
          case 242:
          case 240: {
            playerHeroIds_.AddEntriesFrom(input, _repeated_playerHeroIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerHeroData : pb::IMessage<PlayerHeroData> {
    private static readonly pb::MessageParser<PlayerHeroData> _parser = new pb::MessageParser<PlayerHeroData>(() => new PlayerHeroData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerHeroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.PlayerDeckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroData(PlayerHeroData other) : this() {
      heros_ = other.heros_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroData Clone() {
      return new PlayerHeroData(this);
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Data.HeroData> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(82, global::Data.HeroData.Parser);
    private readonly pbc::RepeatedField<global::Data.HeroData> heros_ = new pbc::RepeatedField<global::Data.HeroData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.HeroData> Heros {
      get { return heros_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerHeroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerHeroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heros_.Equals(other.heros_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heros_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heros_.WriteTo(output, _repeated_heros_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heros_.CalculateSize(_repeated_heros_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerHeroData other) {
      if (other == null) {
        return;
      }
      heros_.Add(other.heros_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
