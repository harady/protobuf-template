// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/master_data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data {

  /// <summary>Holder for reflection information generated from data/master_data.proto</summary>
  public static partial class MasterDataReflection {

    #region Descriptor
    /// <summary>File descriptor for data/master_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MasterDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZkYXRhL21hc3Rlcl9kYXRhLnByb3RvEgRkYXRhIlwKClJld2FyZERhdGES",
            "EQoJaXRlbV90eXBlGAogASgNEg8KB2l0ZW1faWQYFCABKA0SEwoLaXRlbV9h",
            "bW91bnQYHiABKA0SFQoNaXRlbV9vcHRfanNvbhgoIAEoCSI5ChJMb2FkaW5n",
            "TWVzc2FnZURhdGESEwoLZGVzY3JpcHRpb24YCiABKAkSDgoGd2VpZ2h0GBQg",
            "ASgNIs8DCghIZXJvRGF0YRIKCgJpZBgKIAEoDRIMCgRuYW1lGBQgASgJEhMK",
            "C2NhcmRfbnVtYmVyGB4gASgNEhkKEWNoYXJhY3Rlcl9pbmZvX2lkGCggASgN",
            "EhcKD3NkX2NoYXJhY3Rlcl9pZBgyIAEoDRITCgthdHRhY2tfdHlwZRg8IAEo",
            "DRITCgtiYXNlX2F0dGFjaxhGIAEoDRISCgpiYXNlX3NwZWVkGFAgASgNEg8K",
            "B2Jhc2VfaHAYWiABKA0SEQoJbWF4X2xldmVsGGQgASgNEhIKCm1heF9raXp1",
            "bmEYbiABKA0SEgoKbWF4X2F0dGFjaxh4IAEoDRISCgltYXhfc3BlZWQYggEg",
            "ASgNEg8KBm1heF9ocBiMASABKA0SGQoQbWF4X2F0dGFja19ib251cxiWASAB",
            "KA0SGAoPbWF4X3NwZWVkX2JvbnVzGKABIAEoDRIVCgxtYXhfaHBfYm9udXMY",
            "qgEgASgNEhUKDGF0dGFja19ib251cxi0ASABKA0SFAoLc3BlZWRfYm9udXMY",
            "vgEgASgNEhEKCGhwX2JvbnVzGMgBIAEoDRIRCghjYXRlZ29yeRjSASABKA0S",
            "EgoJYXR0cmlidXRlGNwBIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.RewardData), global::Data.RewardData.Parser, new[]{ "ItemType", "ItemId", "ItemAmount", "ItemOptJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.LoadingMessageData), global::Data.LoadingMessageData.Parser, new[]{ "Description", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.HeroData), global::Data.HeroData.Parser, new[]{ "Id", "Name", "CardNumber", "CharacterInfoId", "SdCharacterId", "AttackType", "BaseAttack", "BaseSpeed", "BaseHp", "MaxLevel", "MaxKizuna", "MaxAttack", "MaxSpeed", "MaxHp", "MaxAttackBonus", "MaxSpeedBonus", "MaxHpBonus", "AttackBonus", "SpeedBonus", "HpBonus", "Category", "Attribute" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RewardData : pb::IMessage<RewardData> {
    private static readonly pb::MessageParser<RewardData> _parser = new pb::MessageParser<RewardData>(() => new RewardData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.MasterDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardData(RewardData other) : this() {
      itemType_ = other.itemType_;
      itemId_ = other.itemId_;
      itemAmount_ = other.itemAmount_;
      itemOptJson_ = other.itemOptJson_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardData Clone() {
      return new RewardData(this);
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 10;
    private uint itemType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 20;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_amount" field.</summary>
    public const int ItemAmountFieldNumber = 30;
    private uint itemAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemAmount {
      get { return itemAmount_; }
      set {
        itemAmount_ = value;
      }
    }

    /// <summary>Field number for the "item_opt_json" field.</summary>
    public const int ItemOptJsonFieldNumber = 40;
    private string itemOptJson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemOptJson {
      get { return itemOptJson_; }
      set {
        itemOptJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemType != other.ItemType) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemAmount != other.ItemAmount) return false;
      if (ItemOptJson != other.ItemOptJson) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemAmount != 0) hash ^= ItemAmount.GetHashCode();
      if (ItemOptJson.Length != 0) hash ^= ItemOptJson.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemType != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ItemType);
      }
      if (ItemId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ItemId);
      }
      if (ItemAmount != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ItemAmount);
      }
      if (ItemOptJson.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ItemOptJson);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
      }
      if (ItemId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemAmount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ItemAmount);
      }
      if (ItemOptJson.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ItemOptJson);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardData other) {
      if (other == null) {
        return;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemAmount != 0) {
        ItemAmount = other.ItemAmount;
      }
      if (other.ItemOptJson.Length != 0) {
        ItemOptJson = other.ItemOptJson;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            ItemType = input.ReadUInt32();
            break;
          }
          case 160: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 240: {
            ItemAmount = input.ReadUInt32();
            break;
          }
          case 322: {
            ItemOptJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadingMessageData : pb::IMessage<LoadingMessageData> {
    private static readonly pb::MessageParser<LoadingMessageData> _parser = new pb::MessageParser<LoadingMessageData>(() => new LoadingMessageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadingMessageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.MasterDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingMessageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingMessageData(LoadingMessageData other) : this() {
      description_ = other.description_;
      weight_ = other.weight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadingMessageData Clone() {
      return new LoadingMessageData(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 10;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 20;
    private uint weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadingMessageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadingMessageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (Weight != other.Weight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Description);
      }
      if (Weight != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Weight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Weight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadingMessageData other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            Description = input.ReadString();
            break;
          }
          case 160: {
            Weight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroData : pb::IMessage<HeroData> {
    private static readonly pb::MessageParser<HeroData> _parser = new pb::MessageParser<HeroData>(() => new HeroData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.MasterDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData(HeroData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      cardNumber_ = other.cardNumber_;
      characterInfoId_ = other.characterInfoId_;
      sdCharacterId_ = other.sdCharacterId_;
      attackType_ = other.attackType_;
      baseAttack_ = other.baseAttack_;
      baseSpeed_ = other.baseSpeed_;
      baseHp_ = other.baseHp_;
      maxLevel_ = other.maxLevel_;
      maxKizuna_ = other.maxKizuna_;
      maxAttack_ = other.maxAttack_;
      maxSpeed_ = other.maxSpeed_;
      maxHp_ = other.maxHp_;
      maxAttackBonus_ = other.maxAttackBonus_;
      maxSpeedBonus_ = other.maxSpeedBonus_;
      maxHpBonus_ = other.maxHpBonus_;
      attackBonus_ = other.attackBonus_;
      speedBonus_ = other.speedBonus_;
      hpBonus_ = other.hpBonus_;
      category_ = other.category_;
      attribute_ = other.attribute_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData Clone() {
      return new HeroData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 20;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card_number" field.</summary>
    public const int CardNumberFieldNumber = 30;
    private uint cardNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardNumber {
      get { return cardNumber_; }
      set {
        cardNumber_ = value;
      }
    }

    /// <summary>Field number for the "character_info_id" field.</summary>
    public const int CharacterInfoIdFieldNumber = 40;
    private uint characterInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CharacterInfoId {
      get { return characterInfoId_; }
      set {
        characterInfoId_ = value;
      }
    }

    /// <summary>Field number for the "sd_character_id" field.</summary>
    public const int SdCharacterIdFieldNumber = 50;
    private uint sdCharacterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SdCharacterId {
      get { return sdCharacterId_; }
      set {
        sdCharacterId_ = value;
      }
    }

    /// <summary>Field number for the "attack_type" field.</summary>
    public const int AttackTypeFieldNumber = 60;
    private uint attackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    /// <summary>Field number for the "base_attack" field.</summary>
    public const int BaseAttackFieldNumber = 70;
    private uint baseAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseAttack {
      get { return baseAttack_; }
      set {
        baseAttack_ = value;
      }
    }

    /// <summary>Field number for the "base_speed" field.</summary>
    public const int BaseSpeedFieldNumber = 80;
    private uint baseSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseSpeed {
      get { return baseSpeed_; }
      set {
        baseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "base_hp" field.</summary>
    public const int BaseHpFieldNumber = 90;
    private uint baseHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseHp {
      get { return baseHp_; }
      set {
        baseHp_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 100;
    private uint maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_kizuna" field.</summary>
    public const int MaxKizunaFieldNumber = 110;
    private uint maxKizuna_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxKizuna {
      get { return maxKizuna_; }
      set {
        maxKizuna_ = value;
      }
    }

    /// <summary>Field number for the "max_attack" field.</summary>
    public const int MaxAttackFieldNumber = 120;
    private uint maxAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAttack {
      get { return maxAttack_; }
      set {
        maxAttack_ = value;
      }
    }

    /// <summary>Field number for the "max_speed" field.</summary>
    public const int MaxSpeedFieldNumber = 130;
    private uint maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 140;
    private uint maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "max_attack_bonus" field.</summary>
    public const int MaxAttackBonusFieldNumber = 150;
    private uint maxAttackBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAttackBonus {
      get { return maxAttackBonus_; }
      set {
        maxAttackBonus_ = value;
      }
    }

    /// <summary>Field number for the "max_speed_bonus" field.</summary>
    public const int MaxSpeedBonusFieldNumber = 160;
    private uint maxSpeedBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSpeedBonus {
      get { return maxSpeedBonus_; }
      set {
        maxSpeedBonus_ = value;
      }
    }

    /// <summary>Field number for the "max_hp_bonus" field.</summary>
    public const int MaxHpBonusFieldNumber = 170;
    private uint maxHpBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHpBonus {
      get { return maxHpBonus_; }
      set {
        maxHpBonus_ = value;
      }
    }

    /// <summary>Field number for the "attack_bonus" field.</summary>
    public const int AttackBonusFieldNumber = 180;
    private uint attackBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackBonus {
      get { return attackBonus_; }
      set {
        attackBonus_ = value;
      }
    }

    /// <summary>Field number for the "speed_bonus" field.</summary>
    public const int SpeedBonusFieldNumber = 190;
    private uint speedBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedBonus {
      get { return speedBonus_; }
      set {
        speedBonus_ = value;
      }
    }

    /// <summary>Field number for the "hp_bonus" field.</summary>
    public const int HpBonusFieldNumber = 200;
    private uint hpBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HpBonus {
      get { return hpBonus_; }
      set {
        hpBonus_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 210;
    private uint category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 220;
    private uint attribute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CardNumber != other.CardNumber) return false;
      if (CharacterInfoId != other.CharacterInfoId) return false;
      if (SdCharacterId != other.SdCharacterId) return false;
      if (AttackType != other.AttackType) return false;
      if (BaseAttack != other.BaseAttack) return false;
      if (BaseSpeed != other.BaseSpeed) return false;
      if (BaseHp != other.BaseHp) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (MaxKizuna != other.MaxKizuna) return false;
      if (MaxAttack != other.MaxAttack) return false;
      if (MaxSpeed != other.MaxSpeed) return false;
      if (MaxHp != other.MaxHp) return false;
      if (MaxAttackBonus != other.MaxAttackBonus) return false;
      if (MaxSpeedBonus != other.MaxSpeedBonus) return false;
      if (MaxHpBonus != other.MaxHpBonus) return false;
      if (AttackBonus != other.AttackBonus) return false;
      if (SpeedBonus != other.SpeedBonus) return false;
      if (HpBonus != other.HpBonus) return false;
      if (Category != other.Category) return false;
      if (Attribute != other.Attribute) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CardNumber != 0) hash ^= CardNumber.GetHashCode();
      if (CharacterInfoId != 0) hash ^= CharacterInfoId.GetHashCode();
      if (SdCharacterId != 0) hash ^= SdCharacterId.GetHashCode();
      if (AttackType != 0) hash ^= AttackType.GetHashCode();
      if (BaseAttack != 0) hash ^= BaseAttack.GetHashCode();
      if (BaseSpeed != 0) hash ^= BaseSpeed.GetHashCode();
      if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (MaxKizuna != 0) hash ^= MaxKizuna.GetHashCode();
      if (MaxAttack != 0) hash ^= MaxAttack.GetHashCode();
      if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (MaxAttackBonus != 0) hash ^= MaxAttackBonus.GetHashCode();
      if (MaxSpeedBonus != 0) hash ^= MaxSpeedBonus.GetHashCode();
      if (MaxHpBonus != 0) hash ^= MaxHpBonus.GetHashCode();
      if (AttackBonus != 0) hash ^= AttackBonus.GetHashCode();
      if (SpeedBonus != 0) hash ^= SpeedBonus.GetHashCode();
      if (HpBonus != 0) hash ^= HpBonus.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Attribute != 0) hash ^= Attribute.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Name);
      }
      if (CardNumber != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(CardNumber);
      }
      if (CharacterInfoId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(CharacterInfoId);
      }
      if (SdCharacterId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(SdCharacterId);
      }
      if (AttackType != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(AttackType);
      }
      if (BaseAttack != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(BaseAttack);
      }
      if (BaseSpeed != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(BaseSpeed);
      }
      if (BaseHp != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(BaseHp);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(MaxLevel);
      }
      if (MaxKizuna != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(MaxKizuna);
      }
      if (MaxAttack != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(MaxAttack);
      }
      if (MaxSpeed != 0) {
        output.WriteRawTag(144, 8);
        output.WriteUInt32(MaxSpeed);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(MaxHp);
      }
      if (MaxAttackBonus != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(MaxAttackBonus);
      }
      if (MaxSpeedBonus != 0) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(MaxSpeedBonus);
      }
      if (MaxHpBonus != 0) {
        output.WriteRawTag(208, 10);
        output.WriteUInt32(MaxHpBonus);
      }
      if (AttackBonus != 0) {
        output.WriteRawTag(160, 11);
        output.WriteUInt32(AttackBonus);
      }
      if (SpeedBonus != 0) {
        output.WriteRawTag(240, 11);
        output.WriteUInt32(SpeedBonus);
      }
      if (HpBonus != 0) {
        output.WriteRawTag(192, 12);
        output.WriteUInt32(HpBonus);
      }
      if (Category != 0) {
        output.WriteRawTag(144, 13);
        output.WriteUInt32(Category);
      }
      if (Attribute != 0) {
        output.WriteRawTag(224, 13);
        output.WriteUInt32(Attribute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CardNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CardNumber);
      }
      if (CharacterInfoId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CharacterInfoId);
      }
      if (SdCharacterId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SdCharacterId);
      }
      if (AttackType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackType);
      }
      if (BaseAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseAttack);
      }
      if (BaseSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseSpeed);
      }
      if (BaseHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseHp);
      }
      if (MaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      if (MaxKizuna != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxKizuna);
      }
      if (MaxAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxAttack);
      }
      if (MaxSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
      }
      if (MaxHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxHp);
      }
      if (MaxAttackBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxAttackBonus);
      }
      if (MaxSpeedBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeedBonus);
      }
      if (MaxHpBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxHpBonus);
      }
      if (AttackBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackBonus);
      }
      if (SpeedBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpeedBonus);
      }
      if (HpBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HpBonus);
      }
      if (Category != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Category);
      }
      if (Attribute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Attribute);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CardNumber != 0) {
        CardNumber = other.CardNumber;
      }
      if (other.CharacterInfoId != 0) {
        CharacterInfoId = other.CharacterInfoId;
      }
      if (other.SdCharacterId != 0) {
        SdCharacterId = other.SdCharacterId;
      }
      if (other.AttackType != 0) {
        AttackType = other.AttackType;
      }
      if (other.BaseAttack != 0) {
        BaseAttack = other.BaseAttack;
      }
      if (other.BaseSpeed != 0) {
        BaseSpeed = other.BaseSpeed;
      }
      if (other.BaseHp != 0) {
        BaseHp = other.BaseHp;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.MaxKizuna != 0) {
        MaxKizuna = other.MaxKizuna;
      }
      if (other.MaxAttack != 0) {
        MaxAttack = other.MaxAttack;
      }
      if (other.MaxSpeed != 0) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.MaxAttackBonus != 0) {
        MaxAttackBonus = other.MaxAttackBonus;
      }
      if (other.MaxSpeedBonus != 0) {
        MaxSpeedBonus = other.MaxSpeedBonus;
      }
      if (other.MaxHpBonus != 0) {
        MaxHpBonus = other.MaxHpBonus;
      }
      if (other.AttackBonus != 0) {
        AttackBonus = other.AttackBonus;
      }
      if (other.SpeedBonus != 0) {
        SpeedBonus = other.SpeedBonus;
      }
      if (other.HpBonus != 0) {
        HpBonus = other.HpBonus;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Attribute != 0) {
        Attribute = other.Attribute;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 80: {
            Id = input.ReadUInt32();
            break;
          }
          case 162: {
            Name = input.ReadString();
            break;
          }
          case 240: {
            CardNumber = input.ReadUInt32();
            break;
          }
          case 320: {
            CharacterInfoId = input.ReadUInt32();
            break;
          }
          case 400: {
            SdCharacterId = input.ReadUInt32();
            break;
          }
          case 480: {
            AttackType = input.ReadUInt32();
            break;
          }
          case 560: {
            BaseAttack = input.ReadUInt32();
            break;
          }
          case 640: {
            BaseSpeed = input.ReadUInt32();
            break;
          }
          case 720: {
            BaseHp = input.ReadUInt32();
            break;
          }
          case 800: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 880: {
            MaxKizuna = input.ReadUInt32();
            break;
          }
          case 960: {
            MaxAttack = input.ReadUInt32();
            break;
          }
          case 1040: {
            MaxSpeed = input.ReadUInt32();
            break;
          }
          case 1120: {
            MaxHp = input.ReadUInt32();
            break;
          }
          case 1200: {
            MaxAttackBonus = input.ReadUInt32();
            break;
          }
          case 1280: {
            MaxSpeedBonus = input.ReadUInt32();
            break;
          }
          case 1360: {
            MaxHpBonus = input.ReadUInt32();
            break;
          }
          case 1440: {
            AttackBonus = input.ReadUInt32();
            break;
          }
          case 1520: {
            SpeedBonus = input.ReadUInt32();
            break;
          }
          case 1600: {
            HpBonus = input.ReadUInt32();
            break;
          }
          case 1680: {
            Category = input.ReadUInt32();
            break;
          }
          case 1760: {
            Attribute = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
