using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Newtonsoft.Json;

using Amazon.Lambda.Core;
using Amazon.Lambda.APIGatewayEvents;

//GENERATED CODE, DO NOT EDIT !
namespace AwsDotnetCsharp
{
{{- range .Services }}
{{- $service_name := .Name }}
	public partial class {{ $service_name }}ServiceBase : ServiceBase
	{
{{ range .Methods }}
		#region {{ .Name }}
		public async Task<APIGatewayProxyResponse> {{ .Name }}(
			APIGatewayProxyRequest request, ILambdaContext context)
		{
			var apiRequest = GetApiRequest<{{ .Request.Name }}>(request);
			Console.WriteLine("{{ $service_name }}/{{ .Name }} apiRequest=" + JsonConvert.SerializeObject(apiRequest));

			await MongoSessionManager.StartSessionAsync();
			MongoSessionManager.StartTransaction();

			object apiResponse;
			try {
				apiResponse = await {{ .Name }}Impl(apiRequest, context);
				await MongoSessionManager.CommitTransactionAsync();
			}
			catch (APIException e) {
				apiResponse = e.apiError;
				context.Logger.Log(e.Message + "\n" + e.StackTrace);
				await MongoSessionManager.AbortTransactionAsync();
			}
			catch (Exception e) {
				apiResponse = APIError.GetDefaultError(e.Message, e.StackTrace);
				context.Logger.Log(e.Message + "\n" + e.StackTrace);
				await MongoSessionManager.AbortTransactionAsync();
			}
			await SendSlackIfError(apiResponse);
			Console.WriteLine("{{ $service_name }}/{{ .Name }} apiResponse=" + JsonConvert.SerializeObject(apiResponse));
			var response = GetAPIGatewayProxyResponse(apiResponse);
			return response;
		}

		public virtual async Task<{{ .Response.Name }}> {{ .Name }}Impl(
			{{ .Request.Name }} request, ILambdaContext context)
		{
			await Task.Run(() => Console.WriteLine("{{ .Name }}Impl is not implemented"));
			return new {{ .Response.Name }}();
		}
		#endregion // {{ .Name }}
{{- end }}
	}
{{ end -}}	
	
{{- range .Messages }}
	{{- if (HasSuffix .Name "Response") }}
	[JsonObject(MemberSerialization.OptIn)]
	public partial class {{ .Name }} : APIResponse
	{
	{{- else }}
	[JsonObject(MemberSerialization.OptIn)]
	public partial class {{ .Name }} : APIRequest
	{
	{{- end }}
	{{- range .Fields }}
		[JsonProperty("{{ .Name }}")]
{{- if not .IsRepeated }}
		public {{ .BaseType }} {{ .Name | ToCamelCase }} { get; set; }
{{- else }}
		public List<{{ .BaseType }}> {{ .Name | ToCamelCase }} { get; set; } = new List<{{ .BaseType }}>();
{{- end }}
{{- end }}
	}
{{ end -}}
}
