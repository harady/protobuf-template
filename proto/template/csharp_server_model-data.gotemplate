{{- if gt (len .Messages) 0 -}}
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;
using MessagePack;

namespace AwsDotnetCsharp
{
{{- range .Messages }}
	{{- $hasId := (eq (index .Fields 0).Name "id") -}}
	{{- $className := .Name }}
	[BsonIgnoreExtraElements]
	[DataContract]
	public partial class {{ $className }} : AbstractData
	{
		[BsonId]
		public ObjectId _id { get; set; }
{{- range .Fields }}
		[BsonElement("{{ .Name | ToCamelCase }}")]
		[DataMember(Name = "{{ .Name | ToCamelCase }}")]
	{{- if .IsRepeated  }}
		public List<{{ .BaseType }}> {{ .Name | ToCamelCase }} { get; set; } = new List<{{ .BaseType }}>();
	{{- else }}
		public {{ .BaseType }} {{ .Name | ToCamelCase }} { get; set; }
	{{- end }}
	{{- if (HasSuffix .Name "_at") }}
		[BsonIgnore]
		public DateTime {{ .Name | SnakeToPascal }} {
			get { return DateTimeUtil.FromEpochTime({{ .Name | ToCamelCase }}); }
			set { {{ .Name | ToCamelCase }} = value.ToEpochTime(); }
		}
	{{- end }}
{{ end }}
{{- if eq $hasId true -}}
	{{- range .Fields }}
		{{- if (eq .Name "name") }}

		public string idNameText => GetIdNameText(id, name);
	{{- end -}}
{{ end }}
{{- end }}
	}
{{ end -}}
}
{{ end }}