{{- if gt (len .Messages) 0 -}}
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;

namespace AwsDotnetCsharp
{
{{- range .Messages }}
	{{- $className := .Name }}
	public partial class {{ $className }}
	{
		public async Task LoadAll(UserData user)
		{
			this.user = user ?? throw new APIException(message: "ユーザーが存在しません.");
{{- range .Fields }}
	{{- if .IsRepeated }}
			this.{{.Name | ToCamelCase}} = await {{ .BaseType }}.DbGetDataListByUserId(this.user.id);
	{{- end }}
{{- end }}
		}

		public void Merge({{ $className }} toMerge)
		{
{{- range .Fields }}
	{{- if .IsRepeated }}
			{{- $deletedIdsPropertieName := (Replace (Join (Join "deleted" (.Name | SnakeToPascal)) "_Ids") "s_Ids" "Ids") }}
			this.{{.Name | ToCamelCase}}.Merge(toMerge.{{.Name | ToCamelCase}});
			this.{{ $deletedIdsPropertieName }}.Merge(toMerge.{{ $deletedIdsPropertieName }});
	{{- else }}
			if (toMerge.{{.Name | ToCamelCase}} != null) {
				this.{{.Name | ToCamelCase}} = toMerge.{{.Name | ToCamelCase}};
			}
	{{- end }}
{{- end }}
		}
{{- range .Fields }}
		{{- $typeNamePrefix := (Replace (Join (.Name | SnakeToPascal) "___") "s___" "") }}
		{{- $deletedIdsPropertieName := (Join (Join "deleted" $typeNamePrefix) "Ids") }}
		{{- if .IsRepeated  }}

		[BsonElement("{{ $deletedIdsPropertieName }}")]
		[DataMember(Name = "{{ $deletedIdsPropertieName }}")]
		public List<long> {{ $deletedIdsPropertieName }} { get; set; } = new List<long>();
		{{- end }}
{{- end }}
{{- range .Fields }}
		{{- $typeNamePrefixPascal := (Replace (Join (.Name | SnakeToPascal) "___") "s___" "") }}
		{{- $typeNamePrefixCamel := (Replace (Join (.Name | ToCamelCase) "___") "s___" "") }}
		{{- if .IsRepeated  }}

		public TableUpdateData<{{ .BaseType }}> {{ $typeNamePrefixCamel }}TableUpdate
			=> new TableUpdateData<{{ .BaseType }}>({{ $typeNamePrefixCamel }}s, deleted{{ $typeNamePrefixPascal }}Ids);
		{{- end }}
{{- end }}
	}
{{ end -}}
}
{{ end }}