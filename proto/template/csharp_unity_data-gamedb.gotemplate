{{- if gt (len .Messages) 0 -}}
using System.Collections.Generic;

{{ range .Messages -}}
{{- $hasId := (eq (index .Fields 0).Name "id") }}
{{- $uniqueIndexess := .UniqueIndexes }}
{{- $Indexess := .Indexes -}}
public partial class {{ .Name }}{{- if eq $hasId true }} : IUnique{{- end }}<long>
{
	#region NullObject
	public static {{ .Name }} Null => NullObjectContainer.Get<{{ .Name }}>();

	public bool isNull => (this == Null);
	#endregion
	{{- if eq $hasId true }}
	#region GameDbWrapper(DataTable)
	public static DataTable<long, {{ .Name }}> dataTable {
		get {
			DataTable<long, {{ .Name }}> result;
			if (GameDb.TableExists<long, {{ .Name }}>()) {
				result = GameDb.From<long, {{ .Name }}>();
			} else {
				result = GameDb.CreateTable<long, {{ .Name }}>();
				Setup{{ .Name }}TableIndexGenerated(result);
				Setup{{ .Name }}TableIndex(result);
			}
			return result;
		}
	}

	public static int Count => dataTable.Count;

	public static List<{{ .Name }}> GetDataList()
	{
		return dataTable.dataList;
	}

	public static void SetData({{ .Name }} data)
	{
		dataTable.Insert(data);
	}

	public static void AddDataList(IEnumerable<{{ .Name }}> dataList)
	{
		dataTable.InsertRange(dataList);
	}

	public static void SetDataList(IEnumerable<{{ .Name }}> dataList)
	{
		Clear();
		dataTable.InsertRange(dataList);
	}

	public static void Clear()
	{
		dataTable.DeleteAll();
	}

	static partial void Setup{{ .Name }}TableIndex(DataTable<long, {{ .Name }}> targetDataTable);

	private static void Setup{{ .Name }}TableIndexGenerated(DataTable<long, {{ .Name }}> targetDataTable)
	{
		{{- range .Fields }}
			{{- if or (eq .Name "id") (StrArrayContains $uniqueIndexess .Name) }}
		targetDataTable.CreateUniqueIndex("{{ .Name | SnakeToPascal }}", aData => (object)aData.{{ .Name | ToCamelCase }});
			{{- end }}
		{{- end }}
		{{- range .Fields }}
			{{- if (StrArrayContains $Indexess .Name) }}
		targetDataTable.CreateIndex("{{ .Name | SnakeToPascal }}", aData => (object)aData.{{ .Name | ToCamelCase }});
			{{- end }}
		{{- end }}
	}
	#endregion
	{{- end }}
	{{- $messageName := .Name }}
	{{- range .Fields }}
		{{- if or (eq .Name "id") (StrArrayContains $uniqueIndexess .Name) }}
	#region DataTableUniqueIndex({{.Name | SnakeToPascal}})
	public static {{ $messageName }} GetDataBy{{ .Name | SnakeToPascal }}({{ .BaseType }} {{ .Name | ToCamelCase }})
	{
		return dataTable.GetData("{{ .Name | SnakeToPascal }}", (object){{ .Name | ToCamelCase }});
	}

	public static void RemoveDataBy{{ .Name | SnakeToPascal }}s(ICollection<{{ .BaseType }}> {{ .Name | ToCamelCase }}s)
	{
		{{ .Name | ToCamelCase }}s.ForEach(a{{ .Name | SnakeToPascal }} => RemoveDataBy{{ .Name | SnakeToPascal }}(a{{ .Name | SnakeToPascal }}));
	}

	public static void RemoveDataBy{{ .Name | SnakeToPascal }}({{ .BaseType }} {{ .Name | ToCamelCase }})
	{
		dataTable.DeleteByKey("{{ .Name | SnakeToPascal }}", (object){{ .Name | ToCamelCase }});
	}
	#endregion
		{{- end }}
	{{- end }}
	{{- range .Fields }}
		{{- if (StrArrayContains $Indexess .Name) }}
	#region DataTableIndex ({{.Name | SnakeToPascal}})
	public static List<{{ $messageName }}> GetDataListBy{{ .Name | SnakeToPascal }}({{ .BaseType }} {{ .Name | ToCamelCase }})
	{
		return dataTable.GetDataList("{{ .Name | SnakeToPascal }}", (object){{ .Name | ToCamelCase }});
	}
	#endregion
		{{- end }}
	{{- end }}
}
{{ end -}}
{{ end }}
