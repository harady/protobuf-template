{{- if gt (len .Messages) 0 -}}
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

{{ range .Messages -}}
{{- $hasId := (eq (index .Fields 0).Name "id") -}}
[DataContract]
public partial class {{ .Name }} : AbstractData
{
{{- range .Fields }}
	[DataMember(Name = "{{ .Name | ToCamelCase }}")]
{{- if not .IsRepeated  }}
	public {{ .BaseType }} {{ .Name | ToCamelCase }} { get; set; }
{{- else }}
	public List<{{ .BaseType }}> {{ .Name | ToCamelCase }} { get; set; } = new List<{{ .BaseType }}>();
{{- end }}
{{ if (HasSuffix .Name "_at") }}
	public DateTime {{ .Name | SnakeToPascal }} {
		get { return ServerDateTimeUtil.FromEpoch({{ .Name | ToCamelCase }}); }
		set { {{ .Name | ToCamelCase }} = ServerDateTimeUtil.ToEpoch(value); }
	}
{{ end -}}
{{- end }}
	public {{ .Name }} Clone() {
		var result = new {{ .Name }}();
		{{ range .Fields -}}
		result.{{ .Name | ToCamelCase }} = {{ .Name | ToCamelCase }};
		{{ end -}}
		return result;
	}
{{- if eq $hasId true -}}
	{{- range .Fields }}
		{{- if (eq .Name "name") }}

	public string idNameText => GetIdNameText(id, name);
		{{- end -}}
	{{ end }}
{{- end }}

	public override string ToString()
	{
		return JsonConvert.SerializeObject(this);
	}
}
{{ end -}}
{{ end }}